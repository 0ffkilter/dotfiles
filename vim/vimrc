" SETUP {{{

    " No vi compatibility
    " Also needed for cool vim stuff
    set nocompatible

    " NeoBundle Setup
    if has('vim_starting')
        set runtimepath+=~/.vim/bundle/neobundle.vim/
        call neobundle#rc(expand('~/.vim/bundle/'))
    endif

    NeoBundleFetch 'Shougo/neobundle.vim'

    " Rebind mapleader to something more accessible.
    let mapleader = ','

" SETUP }}}

" vimproc - Interactive command execution in Vim {{{

    NeoBundle 'Shougo/vimproc.vim',
            \ {
            \   'build': {
            \       'windows' : 'make -f make_mingw32.mak',
            \       'cygwin'  : 'make -f make_cygwin.mak',
            \       'mac'     : 'make -f make_mac.mak',
            \       'unix'    : 'make -f make_unix.mak'
            \   }
            \ }

" vimproc }}}

" vim-tmux-navigator - Seamless navigation between tmux panes and vim splits {{{

    NeoBundle 'christoomey/vim-tmux-navigator', { 'disabled': !executable('tmux') }

    " Window movement w/ CTRL + h,j,k,l
    nnoremap <C-h> <C-w>h
    nnoremap <C-j> <C-w>j
    nnoremap <C-k> <C-w>k
    nnoremap <C-l> <C-w>l

" vim-tmux-navigator }}}

" Solarized Color Scheme {{{

    NeoBundle 'altercation/vim-colors-solarized.git'

    colorscheme solarized
    set background=dark

" Solarized Color Scheme }}}

" delimitMate - Autocompletion for delimiters {{{

    NeoBundle 'Raimondi/delimitMate'

" delimitMate }}}

" NERDCommenter - Easily comment lines or blocks of text {{{

    " Mappings:
    " <leader>c  - Toggle current line comment
    " <leader>cm - Block comment
    " <leader>c$ - Comment from cursor to end of line
    " <leader>cA - Comment from cursor to end of line and go into insert mode

    NeoBundle 'scrooloose/nerdcommenter'

" NERDCommenter }}}

" Syntastic - syntax and error checking {{{

    NeoBundle 'scrooloose/syntastic'

" Syntastic }}}

" Gundo - Visualize vim undo tree {{{
    
    " Mappings:
    " <leader>g - Toggle Gundo

    NeoBundleLazy 'sjl/gundo.vim', { 'autoload': { 'commands': ['GundoToggle'] }}

    nnoremap <leader>g :GundoToggle<CR>

" Gundo }}}

" vim-fugitive - Vim Git integration {{{

    NeoBundle 'tpope/vim-fugitive', { 'augroup' : 'fugitive'}

" vim-fugitive }}}

" vim-gitgutter - Show git diff in the gutter {{{
    " Mappings:
    " <leader>gg - Toggle git gutter
    " <leader>hs - Stage hunk
    " <leader>hr - Revert hunk
    " <leader>hn - Next hunk
    " <leader>hp - Previous hunk

    " Don't automatically set mappings.
    let g:gitgutter_map_keys = 0

    NeoBundle 'airblade/vim-gitgutter', { 'disabled': !has('signs') }

    nmap <leader>gg :GitGutterToggle<CR>

    " Hunk management
    nmap <leader>hs :GitGutterStageHunk<CR>
    nmap <leader>hr :GitGutterRevertHunk<CR>

    nmap <leader>hn :GitGutterNextHunk<CR>
    nmap <leader>hp :GitGutterPrevHunk<CR>

" vim-gitgutter }}}

" YouCompleteMe - vim semantic auto-completition {{{

    NeoBundleLazy 'Valloric/YouCompleteMe',
                \ {
                \   'depends' : 'Shougo/vimproc.vim',
                \   'autoload': { 'filetypes': ['c', 'cpp', 'python'] },
                \   'build' : { 'unix' : './install.sh --clang-completer',
                \               'other': './install.sh --clang-completer' }
                \ }

    let g:ycm_autoclose_preview_window_after_completion = 1
    let g:ycm_confirm_extra_conf = 0
    let g:ycm_key_list_previous_completion = ['<S-TAB>', '<Up>']

" YouCompleteMe }}}

" SudoEdit.vim - Easily write to protected files {{{

    NeoBundleLazy 'chrisbra/SudoEdit.vim',
                \ { 'autoload': { 'commands': ['SudoWrite', 'SudoRead'] }}

" SudoEdit.vim }}}

" vim-multiple-cursors - Emulate Sublime Text's multiple cursors feature {{{

    " Mappings:
    " Ctrl-n - Select current/next word
    " Ctrl-p - Select previous word
    " Ctrl-x - Skip current word

    NeoBundle 'terryma/vim-multiple-cursors'

" vim-multiple-cursors }}}

" vim-airline - Lightweight yet fancy status line {{{

    NeoBundle 'bling/vim-airline'

    set laststatus=2

    let g:airline_powerline_fonts=1

    "" powerline symbols
    let g:airline_symbols = {}
    let g:airline_symbols.space = ' '
    let g:airline_left_sep = ''
    let g:airline_left_alt_sep = ''
    let g:airline_right_sep = ''
    let g:airline_right_alt_sep = ''
    let g:airline_symbols.branch = ''
    let g:airline_symbols.readonly = ''
    let g:airline_symbols.linenr = ''

    " airline buffer tab line "
    let g:airline#extensions#tabline#enabled = 1
    
    " straight separators for tabline
    let g:airline#extensions#tabline#left_sep = ''
    let g:airline#extensions#tabline#left_alt_sep = '|'

" vim-airline }}}

" vim-coffee-script - Coffee script syntax highlighting and indenting {{{

    NeoBundleLazy 'kchmck/vim-coffee-script',
                \ { 'autoload': { 'filename_patters': '\.coffee$' }}

" vim-coffee-script }}}

" vim_cpp_indent - Google C++ indent style {{{

    NeoBundleLazy 'phlip9/google-vim_cpp_indent',
                \ { 'autoload': { 'filetypes': ['cpp'] }}

" vim_cpp_indent }}}

" ghcmod.vim - Haskell linting and syntax checking {{{

    NeoBundleLazy 'eagletmt/ghcmod-vim',
                \ { 'autoload': { 'filetypes': ['haskell'] },
                \   'external_commands': 'ghc-mod' }

" ghcmod.vim }}}

" pep8-indent - Python indenting {{{

    NeoBundleLazy 'hynek/vim-python-pep8-indent',
                \ { 'autoload': { 'filetypes': ['python'] }}

" pep8-indent }}}

" GENERAL {{{

    filetype plugin indent on       " detect filetypes
    syntax on                       " syntax highlighting

    " If there are uninstalled bundles found on startup,
    " this will conveniently prompt you to install them.
    NeoBundleCheck

    set history=1000                " make the history larger
    set hidden                      " change buffers w/o having to write first
    set mouse=a                     " enable mouse
    scriptencoding=utf-8            " set encoding to utf-8
    "set shortmess+=filmnrxoOtT      " abbreviate annoying messages

" GENERAL }}}

" VISUAL {{{

    " use 256 colors if gnome-terminal
    if $COLORTERM == 'gnome-terminal'
      set t_Co=256
    endif

    set nu                          " set line numbers
    set showmode                    " show current display mode
    set cursorline                  " show a line under the cursor

    if has('cmdline_info')
        set ruler                                           " show ruler
        set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%)  " uber ruler
        set showcmd                                         " show partial commands in status line
    endif

    " Sign column color should be the same as the line number column
    highlight SignColumn ctermbg=NONE

    " Make line number column same as background color
    highlight LineNr ctermbg=NONE

    " Don't underline the fold lines
    highlight Folded term=bold cterm=bold ctermbg=NONE

" VISUAL }}}

" BEHAVIOR {{{

    set backspace=indent,eol,start  " easy backspace
    set linespace=0                 " reduce space between lines

    set showmatch                   " show matching brackets/parenthesis
    set incsearch                   " find as you search
    set hlsearch                    " highlight search
    set ignorecase                  " ignore case
    set smartcase                   " case sensitive when uc

    set wildmenu                    " show list instead of just completing
    set wildmode=list:longest,full  " command completion
    set whichwrap=b,s,h,l,<,>,[,]   " backspace and cursor keys also wrap

    set scrolljump=5                " lines to scroll when cursor leaves screen
    set scrolloff=3                 " min # of lines to keep below cursor

    set foldenable                  " auto fold code

    set gdefault                    " always use /g on :s substitution

    set nowrap                      " warp long lines
    set clipboard=unnamedplus       " place yanked text into the clipboard

    " Remove trailing whitespaces and ^M chars
    autocmd FileType c,cpp,java,php,js,python,twig,xml,yml autocmd BufWritePre <buffer> :call setline(1,map(getline(1,"$"),'substitute(v:val,"\\s\\+$","","")'))

    " custom text folding function
    function! NeatFoldText()
        let line = ' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
        let lines_count = v:foldend - v:foldstart + 1
        let lines_count_text = '| ' . printf("%10s", lines_count . ' lines') . ' |'
        let foldchar = matchstr(&fillchars, 'fold:\zs.')
        let foldtextstart = strpart(repeat(foldchar, v:foldlevel*2) . '|' . line, 0, (winwidth(0)*2)/3)
        let foldtextend = lines_count_text . repeat(foldchar, 8)
        let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
        return foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
    endfunction

    set foldtext=NeatFoldText()

" BEHAVIOR }}}

" TAB SETTINGS {{{

    set tabpagemax=15               " max # of tabs per page
    set autoindent                  " indent at same level as previous line
    set expandtab                   " space tabs
    set shiftwidth=4                " 4 spaces per tab
    set softtabstop=4               " backspace deletes pseudo-tab
    set tabstop=4                   " indent every 4 columns

" TAB SETTINGS }}}

" KEYBINDINGS {{{

    " Rebind Arrow keys to something more useful
    " Left and Right indent and un-indent the current line/selection
    nmap <silent><Left> <<
    nmap <silent><Right> >>

    vmap <silent><Left> <gv
    vmap <silent><Right> >gv

    " Bind Up and Down keys to add line above and below
    nmap <silent><Up> O<Esc>j
    nmap <silent><Down> o<Esc>k

    " remap Visual Block selection to something that doesn't conflict with system
    " copy/paste
    nnoremap <leader>v <C-v>

    " map S-J and S-K to next and prev buffer
    nnoremap J :bp<CR>
    nnoremap K :bn<CR>

    " map S-H and S-L to undo and redo
    nnoremap H u
    nnoremap L <C-R>

    " Reload Vimrc
    nnoremap <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

" KEYBINDINGS }}}

" vim: foldmethod=marker
